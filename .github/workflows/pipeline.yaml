name: tofu Plan & Apply  # Name of the workflow

 # Trigger the workflow on pull requests and pushes to the main branch
on:
  # pull_request:              # Trigger on PRs targeting main
  #   branches: [ main ]
 push:                      # Trigger on commits pushed to main
  branches: [ main ]
 workflow_dispatch:

defaults:
  run:
    working-directory: ./terraform

 # Define the job for tofu operations
jobs:
  tofu:                 # Define a job called 'tofu'
    runs-on: ubuntu-latest   # Use latest Ubuntu runner

    # Set environment variables required for Exoscale access
    env:                     # Define environment variables from GitHub secrets
      TF_VAR_exoscale_key: ${{ secrets.EXOSCALE_KEY }}
      TF_VAR_exoscale_secret: ${{ secrets.EXOSCALE_SECRET }}
      TF_VAR_cluster_name: "employee-sks-cluster"
      TF_VAR_pg_admin: ${{ secrets.PG_ADMIN }}
      TF_VAR_pg_password: ${{ secrets.PG_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.EXOSCALE_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.EXOSCALE_SECRET }}

    # List of steps to set up tools, validate cluster access, and run tofu plans and applies
    steps:
      - name: Checkout repository  # Step 1: Checkout code
        uses: actions/checkout@v4

      # Install the specified version of OpenTofu CLI
      - name: Install OpenTofu     # Step 2: Install OpenTofu CLI
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
        
      - name: Install Exoscale CLI
        # Install the Exoscale CLI to interact with SKS (Scalable Kubernetes Service)
        continue-on-error: true
        run: |
          curl -fsSL https://raw.githubusercontent.com/exoscale/cli/master/install-latest.sh | sh
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Initialize tofu
      - name: Tofu init
        run: |
         cd cluster
         tofu init
         
         cd ../db
         tofu init
         
         cd ../workloads
         tofu init
         
         cd ../rootapp
         tofu init

      # Automatically apply tofu changes when code is pushed to main
      - name: Run OpenTofu Apply        # Step 6: Auto apply on push to main
        run: |
         cd cluster
         tofu plan
         tofu apply -auto-approve
         
         cd ../db
         tofu plan
         tofu apply -auto-approve
         
         export KUBECONFIG=$(pwd)/../kubeconfig

         set -e
          for tenant_path in ../../gitops-base/apps/employee-app/tenants/*; do
            if [ -d "$tenant_path" ]; then
              namespace=$(basename "$tenant_path")
              echo "ðŸ”‘ Copying secret to namespace: $namespace"

              # Create namespace if it doesn't exist
              kubectl get ns "$namespace" >/dev/null 2>&1 || kubectl create ns "$namespace"

              # Copy the secret
              kubectl get secret pg-secret -n default -o json \
              | jq 'del(.metadata.creationTimestamp, .metadata.resourceVersion, .metadata.uid, .metadata.selfLink, .metadata.annotations, .metadata.ownerReferences, .metadata.managedFields)' \
              | jq '.metadata.namespace = "'$namespace'"' \
              | kubectl apply -f -
            fi
          done
         
         cd ../workloads
         tofu plan
         tofu apply -auto-approve
         
         cd ../rootapp
         tofu plan
         tofu apply -auto-approve
      
      # Automatically apply tofu changes when code is pushed to main
      # - name: Run OpenTofu Apply        # Step 6: Auto apply on push to main
      #  run: sh apply.sh
